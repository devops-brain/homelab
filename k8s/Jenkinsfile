pipeline {
  agent {
    label "kubectl"
  }

  stages {
    stage('bootstrap cluster if missing'){
      steps {
        echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
        sh '''echo "if the model doesn't exist, bootstrap it"
              if [ "$(juju list-models | grep kube | wc -l)" == "0" ]
                then
                  juju add-model kube HomeLab
                  juju model-config -m kube default-series=focal
                  juju add-machine -m kube cuddly-kitten.khoyi.io
                  juju add-machine -m kube hairy-hyena.khoyi.io
                  juju add-machine -m kube wired-clam.khoyi.io
              fi'''
      }
    }
    stage('update juju deployment'){
      steps {
        echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
        sh "juju deploy -m kube --map-machines=existing,6=10 cs:bundle/charmed-kubernetes-559 --overlay k8s/changes.yaml "
        sh "./k8s/juju-block-io.sh"
        echo "I'll need to test if the kubernetes-master charm switches to active prematurely, but this should block IO until the deployment is complete."
      }
    }
    stage('post-deployment config'){
      steps {
        echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
        echo "TODO:  make this idempotent, remove rm command and use a force on the copy"
        sh "mkdir -p ~/.kube"
        sh "juju scp kubernetes-master/0:config ~/.kube/config"
        sh "rm -fv /home/ubuntu/.kube/config"
        sh "mkdir -p /home/ubuntu/.kube"
        sh "cp /root/.kube/config /home/ubuntu/.kube/"
        sh "chown ubuntu /home/ubuntu/.kube"
        sh "chown ubuntu /home/ubuntu/.kube/config"
      }
    }
  }
}